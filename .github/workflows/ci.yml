name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src
    
    - name: Create .env file for testing
      run: |
        cp .env.example .env
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from financial_data_collector import FinancialDataCollector
        from data_manager import StructuredDataManager
        from vector_manager import VectorDataManager
        print('✅ All core modules imported successfully')
        "
    
    - name: Test ticker validation
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from financial_data_collector import FinancialDataCollector
        collector = FinancialDataCollector()
        is_valid, message, suggestions = collector.validate_ticker('AAPL')
        assert is_valid == True
        print('✅ Ticker validation test passed')
        "
    
    - name: Test basic agent functionality
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from agents.financial_agent import EnhancedFinancialAnalysisAgent
        from agents.market_agent import MarketIntelligenceAgent
        
        # Test agent initialization
        financial_agent = EnhancedFinancialAnalysisAgent(use_llm=False)
        market_agent = MarketIntelligenceAgent(use_llm=False)
        
        print('✅ Agent initialization test passed')
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t fintech-agent:test .
    
    - name: Test Docker image
      run: |
        # Test that the image can be created and basic commands work
        docker run --rm fintech-agent:test python -c "import streamlit; print('✅ Streamlit import successful')"

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify deployment readiness
      run: |
        # Check that all necessary files exist
        test -f Dockerfile
        test -f docker-compose.yml
        test -f requirements.txt
        test -f .env.example
        test -f README.md
        echo "✅ All deployment files present"
    
    - name: Create deployment artifact
      run: |
        tar -czf fintech-agent-deployment.tar.gz \
          src/ \
          Dockerfile \
          docker-compose.yml \
          requirements.txt \
          .env.example \
          README.md \
          scripts/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: fintech-agent-deployment
        path: fintech-agent-deployment.tar.gz